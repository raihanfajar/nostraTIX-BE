generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// ============== ENUMS ==============
enum Role {
  USER
  ADMIN
}

enum Category {
  MUSIC
  ARTS
  FOOD
  BUSINESS
  DATING
}

enum Status {
  WAITING_PAYMENT
  WAITING_FOR_CONFIRMATION
  DONE
  REJECTED
  EXPIRED
  CANCELLED
}

// ============== MODELS ==============

model User {
  id           String @id @default(uuid()) @db.Uuid
  name         String
  email        String @unique
  password     String
  role         Role   @default(USER)
  balancePoint Int    @default(0)
  referralCode String @unique // Dibuat unique karena kode referral seharusnya tidak ada yang sama

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  reviews      Review[]
  points       Point[]
  transactions Transaction[]
  Coupon       Coupon[]
}

model Organizer {
  id             String  @id @default(uuid()) @db.Uuid
  slug           String  @unique
  name           String
  email          String  @unique
  password       String
  profilePicture String  @default("https://st3.depositphotos.com/13159112/17145/v/450/depositphotos_171453724-stock-illustration-default-avatar-profile-icon-grey.jpg")
  ratings        Float   @default(0)
  description    String  @default("This is the description of the event organizer") @db.Text
  isActivated    Boolean @default(false)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  events Event[]
}

model Review {
  id      String  @id @default(uuid()) @db.Uuid
  userId  String  @db.Uuid
  eventId String? @db.Uuid
  rating  Int
  comment String  @db.Text

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  user  User   @relation(fields: [userId], references: [id])
  event Event? @relation(fields: [eventId], references: [id])
}

model Point {
  id          Int       @id @default(autoincrement())
  userId      String    @db.Uuid
  expiredDate DateTime? // !pakai date-fns +3 month FNS

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  user User @relation(fields: [userId], references: [id])
}

// Model untuk menyimpan semua negara
model Country {
  id      Int    @id @default(autoincrement())
  name    String
  isoCode String @unique // Kode unik negara, misal: "ID" untuk Indonesia

  cities City[]
  events Event[]

  @@map("countries")
}

// Model untuk menyimpan semua kota
model City {
  id   Int    @id @default(autoincrement())
  name String

  countryId Int
  country   Country @relation(fields: [countryId], references: [id])

  events Event[]

  @@map("cities")
}

model Event {
  id          String   @id @default(uuid()) @db.Uuid
  organizerId String   @db.Uuid
  name        String
  slug        String   @unique
  description String   @db.Text
  category    Category
  countryId   Int
  cityId      Int
  location    String
  startDate   DateTime
  endDate     DateTime
  totalRating Float    @default(0)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  organizer        Organizer             @relation(fields: [organizerId], references: [id])
  reviews          Review[]
  pictures         EventPicture[]
  ticketCategories TicketEventCategory[]
  transactions     Transaction[]
  vouchers         Voucher[]
  tickets          Ticket[]
  countries        Country               @relation(fields: [countryId], references: [id])
  cities           City                  @relation(fields: [cityId], references: [id])

  @@map("events")
}

model EventPicture {
  id       String  @id @default(uuid()) @db.Uuid
  eventId  String  @db.Uuid
  banner   String
  picture1 String
  picture2 String?
  picture3 String?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  event Event @relation(fields: [eventId], references: [id])
}

model TicketEventCategory {
  id          Int    @id @default(autoincrement())
  eventId     String @db.Uuid
  name        String
  description String @db.Text
  price       Int    @default(0)
  seatQuota   Int

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  event       Event         @relation(fields: [eventId], references: [id])
  tickets     Ticket[]
  Transaction Transaction[]
  event       Event         @relation(fields: [eventId], references: [id])
  tickets     Ticket[]
  Transaction Transaction[]
}

model Transaction {
  id                    String   @id @default(uuid()) @db.Uuid
  eventId               String   @db.Uuid
  userId                String   @db.Uuid
  ticketEventCategoryId Int
  voucherCode           String?
  couponCode            String?
  paymentProof          String?
  status                Status   @default(WAITING_PAYMENT)
  quantity              Int
  totalPrice            Int      @default(0)
  expiryAt              DateTime

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  TicketEventCategory TicketEventCategory @relation(fields: [ticketEventCategoryId], references: [id])
  event               Event               @relation(fields: [eventId], references: [id])
  user                User                @relation(fields: [userId], references: [id])
  voucher             Voucher?            @relation(fields: [voucherCode], references: [code])
  coupon              Coupon?             @relation(fields: [couponCode], references: [code])
  tickets             Ticket[]
  TicketEventCategory TicketEventCategory @relation(fields: [ticketEventCategoryId], references: [id])
  event               Event               @relation(fields: [eventId], references: [id])
  user                User                @relation(fields: [userId], references: [id])
  voucher             Voucher?            @relation(fields: [voucherCode], references: [code])
  coupon              Coupon?             @relation(fields: [couponCode], references: [code])
  tickets             Ticket[]
}

model Ticket {
  id              String   @id @default(uuid()) @db.Uuid
  eventId         String   @db.Uuid
  transactionId   String   @db.Uuid
  eventCategoryId Int
  eventName       String
  nameCategory    String
  eventDate       DateTime
  qrCode          String   @default("https://upload.wikimedia.org/wikipedia/commons/thumb/4/41/QR_Code_Example.svg/368px-QR_Code_Example.svg.png")
  qrCode          String   @default("https://upload.wikimedia.org/wikipedia/commons/thumb/4/41/QR_Code_Example.svg/368px-QR_Code_Example.svg.png")

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  event       Event               @relation(fields: [eventId], references: [id])
  transaction Transaction         @relation(fields: [transactionId], references: [id])
  category    TicketEventCategory @relation(fields: [eventCategoryId], references: [id])
}

model Voucher {
  code        String   @id @unique
  eventId     String   @db.Uuid
  discount    Int
  quota       Int
  maxDiscount Int
  expiredDate DateTime

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  event        Event         @relation(fields: [eventId], references: [id])
  transactions Transaction[]
}

model Coupon {
  code        String   @id @unique
  discount    Int
  quota       Int
  onlyForId   String?  @db.Uuid
  maxDiscount Int
  expiredDate DateTime

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  user         User?         @relation(fields: [onlyForId], references: [id])
  transactions Transaction[]
}
